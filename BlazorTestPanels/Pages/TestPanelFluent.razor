@page "/testpanelsfluentvalidator"
@using BlazorTestPanels.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using Syncfusion.Blazor.Inputs;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

<EditForm OnValidSubmit="Submit" EditContext="@editContext" style="width:600px;">
    <ObjectGraphDataAnnotationsValidator />
@*    <ValidationSummary />*@
    <CollapsiblePanel >
        <Header>
             Name
         </Header>
        <Body>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">First Name:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.Name.FirstName" />
                <ValidationMessage For="@(() => person.Name.FirstName)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Middle Initial:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.Name.MiddleInitial" />
                <ValidationMessage For="@(() => person.Name.MiddleInitial)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Last Name:</label>
            <div class="col-md-10">
                <InputText CssClass="form-control" id="name" @bind-Value="person.Name.LastName" />
                <ValidationMessage For="@(() => person.Name.LastName)" />
            </div>
        </div>
        </Body>
    </CollapsiblePanel>
    <CollapsiblePanel IsOpen="false" >
        <Header>
             Age
         </Header>
        <Body>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Age:</label>
            <div class="col-md-10">
                <InputNumber id="name" class="form-control" @bind-Value="person.Age.Age" />
                <ValidationMessage For="@(() => person.Age.Age)" />
            </div>
        </div>
        </Body>
    </CollapsiblePanel>
    <CollapsiblePanel IsOpen="false" >
        <Header>
             Contact Info
         </Header>
        <Body>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Phone:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.ContactInfo.Phone" />
                <ValidationMessage For="@(() => person.ContactInfo.Phone)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Email:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.ContactInfo.Email" />
                <ValidationMessage For="@(() => person.ContactInfo.Email)" />
            </div>
        </div>
        </Body>
    </CollapsiblePanel>
    <CollapsiblePanel IsOpen="false" >
        <Header>
             Address Details
         </Header>
        <Body>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Zip:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.AddressDetails.Zip" />
                <ValidationMessage For="@(() => person.AddressDetails.Zip)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">City:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.AddressDetails.City" />
                <ValidationMessage For="@(() => person.AddressDetails.City)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">State:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="person.AddressDetails.State" />
                <ValidationMessage For="@(() => person.AddressDetails.State)" />
            </div>
        </div>
        </Body>
    </CollapsiblePanel>
    <CollapsiblePanel IsOpen="false" >
        <Header>
             Age Restrictions
         </Header>
        <Body>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Drinking Age:</label>
            <div class="col-md-10">
                <InputCheckbox id="drinkingAge"  @bind-Value="person.AgeRestrictions.DrinkingAge" />
                <ValidationMessage For="@(() => person.AgeRestrictions.DrinkingAge)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Voting Age:</label>
            <div class="col-md-10">
                <InputCheckbox id="name" @bind-Value="person.AgeRestrictions.VotingAge" />
                <ValidationMessage For="@(() => person.AgeRestrictions.VotingAge)" />
            </div>
        </div>
        </Body>
    </CollapsiblePanel>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Submit</button>
            <button type="button" onclick="@(() => ValidateSection("Name"))" class="btn btn-success">Validate Section Name</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext;

    private Person person = new Person
        {
            Id = Guid.NewGuid(),
            Name = new PersonName(),
            Age = new PersonAge(),
            ContactInfo = new ContactInfo(),
            AddressDetails = new AddressDetails(),
            AgeRestrictions = new AgeRestrictions()
        };
    protected override void OnInitialized()
    {
        editContext = new EditContext(person);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();
    }
    private void Submit() => Console.WriteLine($"Id: {person.Id} \n Name: {person.Name} \n Age: {person.Age} \n ContactInfo: {person.ContactInfo} \n {person.AddressDetails} \n AgeRestrictions: {person.AgeRestrictions}");

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var model = e.FieldIdentifier.Model;
        var isDirty = model.GetType().GetProperty("IsDirty");
        if (isDirty is not null)
        {
            isDirty.SetValue(model, true);
        }

        if (person.Name.IsDirty)
        {
            Console.WriteLine("Name is dirty");
        }
        if (person.Age.IsDirty)
        {
            Console.WriteLine("Age is dirty");
        }
        if (person.ContactInfo.IsDirty)
        {
            Console.WriteLine("Contact Info is dirty");
        }
        Console.WriteLine($"Field Name: {e.FieldIdentifier.FieldName}");
    }
    
    private void ValidateSection(string sectionName)
    {
        editContext.EnableDataAnnotationsValidation();
        editContext.Validate();
        foreach (PropertyInfo prop in person.GetType().GetProperties())
        {
            Console.WriteLine($"Person Property Name: {prop.Name}");
            if (prop.Name == sectionName)
            {
                var subClass = person.GetType().GetProperty(prop.Name).GetValue(person);

                foreach (PropertyInfo sectionProp in subClass.GetType().GetProperties(System.Reflection.BindingFlags.Public
                                                                                    | System.Reflection.BindingFlags.Instance
                                                                                    | System.Reflection.BindingFlags.DeclaredOnly))
                {
                    Console.WriteLine($"sub object property name: {sectionProp.Name}");
                    FieldIdentifier fieldIdentifier = editContext.Field(sectionProp.Name);
                    editContext.NotifyFieldChanged(fieldIdentifier);

                    var validationMessages = editContext.GetValidationMessages(fieldIdentifier).Any();
                    Console.WriteLine($"{fieldIdentifier.FieldName} has errors? {validationMessages}");
                    
                    //foreach (var validationMessage in validationMessages)
                    //{
                    //    Console.WriteLine(validationMessage);
                    //}

                }
            }
            //editContext.MarkAsUnmodified();
        }
    }
}
