@using Syncfusion.Blazor.Buttons;

<SfButton CssClass="@(panelOpen ? "collapsible active" : "collapsible")" OnClick="@(e => panelOpen = !panelOpen)">
    <ChildContent>@Header</ChildContent>
</SfButton>
@if (panelOpen)
{
    <div class="@(BodyCssClass)">
        @Body
    </div>
}
else
{
    <div style="display: none;" class="@(BodyCssClass)">
        @Body
    </div>
}

<style>
.collapsible {
  background-color: #eee;
  color: #444;
  cursor: pointer;
  padding: 2px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  font-weight: bold;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.active, .collapsible:hover {
  background-color: #ccc;
}

/* Style the collapsible content. Note: hidden by default */
.content {
  padding: 0 18px;
  /*display: none;*/
  overflow: hidden;
  background-color: #f1f1f1;
}
.collapsible:after {
  content: '\02795'; /* Unicode character for "plus" sign (+) */
  font-size: 13px;
  color: white;
  float: right;
  margin-left: 5px;
}

.active:after {
  content: "\2796"; /* Unicode character for "minus" sign (-) */
}
</style>

@code {
    [Parameter]
    public RenderFragment Header { get; set; }
    [Parameter]
    public RenderFragment Body { get; set; }
    [Parameter]
    public string BodyCssClass { get; set; } = "";
    [Parameter]
    public bool IsOpen { get; set; } = true;

    public bool panelOpen { get; set; } = true;

    public Error? Error { get; set; }
    public List<string> Errors { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            panelOpen = IsOpen;

        } catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }
    }
}